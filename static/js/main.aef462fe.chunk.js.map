{"version":3,"sources":["slices/HeroImage.jsx","components/Stat.jsx","slices/ThreeStats.jsx","slices/TextAndImage.jsx","components/Slice.jsx","components/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["HeroImage","data","className","src","primary","hero_image","url","alt","width","dimensions","height","icons","calendar","faCalendarAlt","faCreditCard","person","faMale","Stat","number","icon","toLocaleString","RichText","render","description","ThreeStats","items","map","item","index","key","TextAndImage","text","style","backgroundImage","image","Slice","slice","slice_type","Header","title","subheading","Client","Prismic","client","accessToken","process","App","useState","doc","setDocData","useEffect","a","getSingle","response","fetchData","id","body","section","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAEe,SAASA,EAAT,GAA8B,IAATC,EAAQ,EAARA,KAClC,OACE,yBACEC,UAAU,aACVC,IAAKF,EAAKG,QAAQC,WAAWC,IAC7BC,IAAKN,EAAKG,QAAQC,WAAWE,IAC7BC,MAAOP,EAAKG,QAAQC,WAAWI,WAAWD,MAC1CE,OAAQT,EAAKG,QAAQC,WAAWI,WAAWC,S,kCCA3CC,EAAQ,CACZC,SAAUC,IACV,cAAeC,IACfC,OAAQC,KAGK,SAASC,EAAT,GAAyB,IAAThB,EAAQ,EAARA,KACzBiB,EAASjB,EAAKiB,OAElB,MADkB,aAAdjB,EAAKkB,OAAqBD,EAASA,EAAOE,kBAE5C,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAiBiB,KAAMR,EAAMV,EAAKkB,SAEpC,yBAAKjB,UAAU,UAAUgB,GACzB,yBAAKhB,UAAU,QAAQmB,WAASC,OAAOrB,EAAKsB,eCpBnC,SAASC,EAAT,GAA+B,IAATvB,EAAQ,EAARA,KACnC,OACE,yBAAKC,UAAU,SACZmB,WAASC,OAAOrB,EAAKG,QAAQmB,aAC9B,yBAAKrB,UAAU,cACZD,EAAKwB,MAAMC,KAAI,SAACC,EAAMC,GACrB,GAAIA,EAAQ,EAAG,OAAO,kBAACX,EAAD,CAAMY,IAAKD,EAAO3B,KAAM0B,SCPzC,SAASG,EAAT,GAAiC,IAAT7B,EAAQ,EAARA,KACrC,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,QAAQmB,WAASC,OAAOrB,EAAKG,QAAQ2B,OACpD,yBACE7B,UAAU,QACV8B,MAAO,CAAEC,gBAAgB,OAAD,OAAShC,EAAKG,QAAQ8B,MAAM5B,IAA5B,SCJjB,SAAS6B,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAC9B,OAAQA,EAAMC,YACZ,IAAI,aACF,OAAO,kBAACrC,EAAD,CAAWC,KAAMmC,IAC1B,IAAI,iBACF,OAAO,kBAACN,EAAD,CAAc7B,KAAMmC,IAC7B,IAAI,cACF,OAAO,kBAACZ,EAAD,CAAYvB,KAAMmC,KCThB,SAASE,EAAT,GAAwC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WACtC,OACE,yBAAKtC,UAAU,UACZmB,WAASC,OAAOiB,GAChBlB,WAASC,OAAOkB,ICFvB,IAGMC,EAASC,IAAQC,OAHH,2CAGuB,CAAEC,YAFzBC,oHAkCLC,MA9Bf,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACDC,EADC,KAWb,OARAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACOV,EAAOW,UAAP,cADP,OACVC,EADU,OAEhBJ,EAAWI,EAASpD,MAFJ,2CAAH,qDAIfqD,KACC,IAGD,yBAAKpD,UAAU,OACb,yBAAKA,UAAU,SACX8C,GAAO,yBAAKO,GAAG,WAAR,cACRP,GACC,oCACE,kBAACV,EAAD,CAAQC,MAAOS,EAAIT,MAAOC,WAAYQ,EAAIR,aAEzCQ,EAAIQ,KAAK9B,KAAI,SAAC+B,EAAS7B,GACtB,GAAI6B,EAAQpB,WACV,OAAO,kBAACF,EAAD,CAAON,IAAKD,EAAOQ,MAAOqB,WCnB7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASzC,OACP,kBAAC,IAAM0C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aef462fe.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function HeroImage({ data }) {\n  return (\n    <img\n      className=\"hero-image\"\n      src={data.primary.hero_image.url}\n      alt={data.primary.hero_image.alt}\n      width={data.primary.hero_image.dimensions.width}\n      height={data.primary.hero_image.dimensions.height}\n    />\n  );\n}\n","import React from \"react\";\nimport { RichText } from \"prismic-reactjs\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCalendarAlt,\n  faCreditCard,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { faMale } from \"@fortawesome/free-solid-svg-icons\";\n\nconst icons = {\n  calendar: faCalendarAlt,\n  \"credit card\": faCreditCard,\n  person: faMale,\n};\n\nexport default function Stat({ data }) {\n  let number = data.number;\n  if (data.icon !== \"calendar\") number = number.toLocaleString();\n  return (\n    <div className=\"stat-box\">\n      <div className=\"icon\">\n        <FontAwesomeIcon icon={icons[data.icon]} />\n      </div>\n      <div className=\"number\">{number}</div>\n      <div className=\"text\">{RichText.render(data.description)}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RichText } from \"prismic-reactjs\";\nimport Stat from \"./../components/Stat\";\n\nexport default function ThreeStats({ data }) {\n  return (\n    <div className=\"stats\">\n      {RichText.render(data.primary.description)}\n      <div className=\"stat-boxes\">\n        {data.items.map((item, index) => {\n          if (index < 3) return <Stat key={index} data={item} />;\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RichText } from \"prismic-reactjs\";\n\nexport default function TextAndImage({ data }) {\n  return (\n    <div className=\"text-and-image\">\n      <div className=\"text\">{RichText.render(data.primary.text)}</div>\n      <div\n        className=\"image\"\n        style={{ backgroundImage: `url(${data.primary.image.url})` }}\n      ></div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport HeroImage from \"./../slices/HeroImage\";\nimport ThreeStats from \"./../slices/ThreeStats\";\nimport TextAndImage from \"./../slices/TextAndImage\";\n\nexport default function Slice({ slice }) {\n  switch (slice.slice_type) {\n    case `hero_image`:\n      return <HeroImage data={slice} />;\n    case `text_and_image`:\n      return <TextAndImage data={slice} />;\n    case `three_stats`:\n      return <ThreeStats data={slice} />;\n  }\n}\n","import React from \"react\";\nimport { RichText } from \"prismic-reactjs\";\n\nexport default function Header({ title, subheading }) {\n  return (\n    <div className=\"header\">\n      {RichText.render(title)}\n      {RichText.render(subheading)}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Prismic from \"prismic-javascript\";\nimport \"./App.css\";\nimport Slice from \"./components/Slice\";\nimport Header from \"./components/Header\";\nconst apiEndpoint = \"https://blog-smile.cdn.prismic.io/api/v2\";\nconst accessToken = process.env.REACT_APP_PRISMIC_ACCESS_TOKEN;\n\nconst Client = Prismic.client(apiEndpoint, { accessToken });\n\nfunction App() {\n  const [doc, setDocData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.getSingle(`about_page`);\n      setDocData(response.data);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"page\">\n        {!doc && <div id=\"loading\">LOADING...</div>}\n        {doc && (\n          <>\n            <Header title={doc.title} subheading={doc.subheading} />\n\n            {doc.body.map((section, index) => {\n              if (section.slice_type)\n                return <Slice key={index} slice={section} />;\n            })}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}